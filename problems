1. Variables

We cannot use plain identifiers as both symbols and variables because we have to treat variables as unfolded by default.
If we use %[car, cdr] = %[1, 2] we have to treat them as symbols.
If `car` and `cdr` were defined as parameters or variable definitions before hand we could want to use them in other messages as such:
  car = 5,
  car + 42,
When we say `+` we really want the internal value of `car` not the symbol.  We cannot treat them as symbols and variables at the same time.
Only potential way is to override `#dnu` in Variable object and dynamically unfold and resend message.
For now resending is not allowed because we could resend `#bind` dynamically which is for now not allowed.
We would have to disallow resending `#bind` specifically in the backend.
This is tricky since we would need to recursively check if our message references the `#bind` primitive.
e.g. `car + #method => 42` could mean that `#+` -> `#somemethod` -> `#bind` -> `_PRIM_BIND`.
If any part of the pipeline has a dynamic conditional we cannot easily check at compile-time if `_PRIM_BIND` is actually being called.

2. Binding

Problem that arises is that we cannot make sure that code that calls `_PRIM_BIND` is dead code due to a non-executed branch or loop.
In the LSP we can denote potentially dead code definitions differently from the compile-time ensure bind calls.

游린 Add variable literal objects that can be dynamically reassigned in code.
游린 %[car, cdr] = %[1, 2, 3] # car = 1, cdr = %[2, 3]
游린 %[car, cdr] = %[1, 2] # car = 1, cdr = %[2], (flatten), cdr = 2
游린 %[car, cdr] = %[1] # car = 1, cdr = %[], (flatten), cdr = nil
游린 %[car, cdr] = %[] # car = nil, cdr = nil
游린 $Margaret -- #method: v => v + 5,
   GET_PARAMETER(v) {
     table_add(&self->parameters, AS_VARIABLE(v)->name, unfold_variable(v))
     table_add(&self->local_variables, AS_VARIABLE(v)->name, unfold_variable(v))
   }
   GET_LOCAL/GET_INSTANCE/GET_GLOBAL(v) {
     table_add(&self->local_variables, AS_VARIABLE(v)->name, v) /* NO UNFOLDING */
   }
   x = $Margaret clone,
   x -- #dnu: message_name => unfold_variable(@self) message_name,
   Variable #-- { (do not unfold and bind) }
   In this process the evaluator treats `car` as a symbol based on some built in rule.
   In tuples/tensors `car` is a symbol, by itself `car` is a variable.
   Potentially define a symbol literal to define %car or :car directly instead of pure identifiers.
   %[car, cdr] = %[1, 2] => %[nil, nil] = %[1, 2]
   $Numeric -- #+ other => _PRIM_ADD: @self TO: other,
   _PRIM_ADD_TO(MargNumeric *var, MargNumeric *other) {
     var->value += other->value;
   }
   MargValue unfold_variable(MargValue var) {
     if(!IS_VARIABLE(var)) {
       return var;
     } else if(AS_VARIABLE(var)->type == LOCAL) {
       return unfold_variable(table_get(&self->local_variables, var->name));
     } else if(AS_VARIABLE(var)->type == INSTANCE) {
       return unfold_variable(table_get(&self->instance_variables, var->name));
     } else if(AS_VARIABLE(var)->type == GLOBAL) {
       return unfold_variable(table_get(&vm->global_variables, var->name));
     }
   }
   /-- potentially for the above recursion is not needed (TEST) --/
   $Margaret -- #_PRIMITIVE_DEFINE_VARIABLE: var TO: other => {
     if(AS_VARIABLE(var)->type == LOCAL) {
       table_add(&self->local_variables, AS_VARIABLE(var)->name, unfold_variable(other));
     } else if(AS_VARIABLE(var)->type == INSTANCE) {
       table_add(&self->instance_variables, AS_VARIABLE(var)->name, unfold_variable(other));
     } else if(AS_VARIABLE(var)->type == GLOBAL) {
       table_add(&vm->global_variables, AS_VARIABLE(var)->name, unfold_variable(other));
     }
   }
   $Margaret -- #= other => nil,
   $Variable = $Margaret clone,
   $Variable -- #= other => _PRIMITIVE_DEFINE_VARIABLE: @self TO: other,
   $Tuple -- #= other => @self each_with_index: { i | @self[i] = other[i] }
   Reassigning objects is fine as long as the object structure for messages is not modified.
   x = 5,
   puts: x,
   $Margaret -- #puts: v => _PRIM_PRINT: v,
   void _PRIM_PRINT(MargValue v) {
     printf("%s"\n, _PRIM_TO_STRING(v));
   }
   char *_PRIM_TO_STRING(MargValue v) {
     char *res = NULL;
     if(IS_NIL(v)) {
       string_add(res, "nil");
     } else if(IS_INTEGER(v)) {
       string_addf(res, "%lld", AS_INTEGER(v)->value);
     } else if(...) {
       ...
     } else if(IS_VARIABLE(v)) {
       _PRIM_TO_STRING(unfold_variable(v));
     }
     return res;
   }
